<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mui="http://firstfloorsoftware.com/ModernUI">
     <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/FirstFloor.ModernUI;component/Assets/Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>
	<Style x:Key="NoteBorderStyle" TargetType="{x:Type Border}">
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="CornerRadius" Value="6" />
		<Setter Property="Padding" Value="6" />
		<Setter Property="Margin" Value="5" />
	</Style>
	<Style TargetType="{x:Type Button}" x:Key="NotificationStyle">
        <Setter Property="Background" Value="{DynamicResource PraemontButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource PraemontButtonForeground}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="FontSize" Value="{StaticResource MetroFontSize}"/>
		<Setter Property="FontFamily" Value="{StaticResource ContentFontFamily}"/>
		<Setter Property="Padding" Value="10,5,10,5"/>
		<Setter Property="BorderBrush" Value="#222222"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						<!-- Content Presenter is where the text content etc is placed by the control -->
						<!-- The bindings are useful so that the control can be parameterized without editing the template -->
						<ContentPresenter HorizontalAlignment="Stretch" Margin="3.245,5,6.245,5" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</Grid>
					<!--Each state sets a brush on the Border in the template -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource PraemontHowerNotification}" TargetName="Border"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type Button}" x:Key="OptionStyle">
        <Setter Property="Background" Value="{DynamicResource PraemontButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource PraemontButtonForeground}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="FontSize" Value="{StaticResource MetroFontSize}"/>
		<Setter Property="FontFamily" Value="{StaticResource ContentFontFamily}"/>
		<Setter Property="Padding" Value="10,5,10,5"/>
		<Setter Property="BorderBrush" Value="#222222"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						<!-- Content Presenter is where the text content etc is placed by the control -->
						<!-- The bindings are useful so that the control can be parameterized without editing the template -->
						<ContentPresenter HorizontalAlignment="Stretch" Margin="3.245,5,6.245,5" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</Grid>

					<!--Each state sets a brush on the Border in the template -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="#7200AC" TargetName="Border"/>          
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type Button}" x:Key="LoginStyle">
        <Setter Property="Background" Value="{DynamicResource PraemontButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource PraemontButtonForeground}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="FontSize" Value="{StaticResource MetroFontSize}"/>
		<Setter Property="FontFamily" Value="{StaticResource ContentFontFamily}"/>
		<Setter Property="Padding" Value="10,5,10,5"/>
		<Setter Property="BorderBrush" Value="#222222"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						<!-- Content Presenter is where the text content etc is placed by the control -->
						<!-- The bindings are useful so that the control can be parameterized without editing the template -->
						<ContentPresenter HorizontalAlignment="Stretch" Margin="3.245,5,6.245,5" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</Grid>

					<!--Each state sets a brush on the Border in the template -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="#199900" TargetName="Border"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type Button}" x:Key="WebStyle">
        <Setter Property="Background" Value="{DynamicResource PraemontButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource PraemontButtonForeground}"/>
		<Setter Property="FontSize" Value="{StaticResource MetroFontSize}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="FontFamily" Value="{StaticResource ContentFontFamily}"/>
		<Setter Property="Padding" Value="10,5,10,5"/>
		<Setter Property="BorderBrush" Value="#222222"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						<!-- Content Presenter is where the text content etc is placed by the control -->
						<!-- The bindings are useful so that the control can be parameterized without editing the template -->
						<ContentPresenter HorizontalAlignment="Stretch" Margin="3.245,5,6.245,5" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</Grid>

					<!--Each state sets a brush on the Border in the template -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="#2673EC" TargetName="Border"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type Button}" x:Key="AddNoteStyle">
        <Setter Property="Background" Value="{DynamicResource PraemontButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource PraemontButtonForeground}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="FontSize" Value="{StaticResource MetroFontSize}"/>
		<Setter Property="FontFamily" Value="{StaticResource ContentFontFamily}"/>
		<Setter Property="Padding" Value="10,5,10,5"/>
		<Setter Property="BorderBrush" Value="#222222"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
						<!-- Content Presenter is where the text content etc is placed by the control -->
						<!-- The bindings are useful so that the control can be parameterized without editing the template -->
						<ContentPresenter HorizontalAlignment="Stretch" Margin="3.245,5,6.245,5" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</Grid>

					<!--Each state sets a brush on the Border in the template -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="#00A4A4" TargetName="Border"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="Switchers" TargetType="{x:Type Button}">
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Viewbox>
						<Grid>
							<Ellipse Margin="0" Fill="Transparent"/>
                            <Path x:Name="path" Fill="{DynamicResource PraemontButtonForeground}" Data="F1 M 12.500,23.749 C 6.296,23.749 1.250,18.703 1.250,12.500 C 1.250,6.296 6.296,1.250 12.500,1.250 C 18.704,1.250 23.750,6.296 23.750,12.500 C 23.750,18.703 18.704,23.749 12.500,23.749 Z M 12.500,0.000 C 5.596,0.000 0.000,5.597 0.000,12.500 C 0.000,19.402 5.596,25.000 12.500,25.000 C 19.404,25.000 25.000,19.402 25.000,12.500 C 25.000,5.597 19.404,0.000 12.500,0.000 Z"/>
                            <Path x:Name="path1" Fill="{DynamicResource PraemontButtonForeground}" Data="F1 M 15.538,6.253 C 15.327,5.981 14.936,5.930 14.662,6.141 L 7.074,12.005 C 6.922,12.123 6.831,12.306 6.831,12.499 C 6.831,12.692 6.921,12.875 7.074,12.993 L 14.662,18.857 C 14.775,18.945 14.910,18.988 15.044,18.988 C 15.230,18.988 15.415,18.905 15.538,18.745 C 15.749,18.473 15.699,18.080 15.426,17.869 L 8.479,12.500 L 15.426,7.130 C 15.699,6.918 15.749,6.526 15.538,6.253 Z"/>
						</Grid>
					</Viewbox> 
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="path" Value="#FFADADAD"/>
							<Setter Property="Fill" TargetName="path1" Value="#FFADADAD"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="path" Value="#2673EC"/>
							<Setter Property="Fill" TargetName="path1" Value="#2673EC"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="FixModernTab" TargetType="{x:Type mui:ModernTab}">
        		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				 <ControlTemplate TargetType="{x:Type mui:ModernTab}">
                    <Grid>
                        <!-- link list -->
                        <ListBox x:Name="LinkList" ItemsSource="{TemplateBinding Links}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="{DynamicResource HeaderMargin}"
                                 ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                                 ScrollViewer.VerticalScrollBarVisibility="Hidden"
                                 ScrollViewer.CanContentScroll="False"
                                 ScrollViewer.PanningMode="Both">
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem">
                                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                    <Setter Property="FontFamily" Value="Segoe UI" />
                                    <Setter Property="Foreground" Value="{DynamicResource MenuText}" />
                                    <Setter Property="FontSize" Value="15"/>
                                    <Setter Property="FontWeight" Value="Bold" />
                                    <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
                                    <Setter Property="Foreground" Value="{DynamicResource MenuText}" />
                                    <Setter Property="Margin" Value="12,0,0,0" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                <ContentPresenter x:Name="Presenter"
                                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="true">
                                                        <Setter Property="Foreground" Value="{DynamicResource MenuTextHover}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsSelected" Value="true">
                                                        <Setter Property="Foreground" Value="{DynamicResource MenuTextSelected}"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListBox.ItemContainerStyle>

                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal" />
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>

                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding DisplayName, Converter={StaticResource ToUpperConverter}}" />
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>

                        <!-- content -->
                        <mui:ModernFrame Source="{Binding SelectedSource, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" ContentLoader="{TemplateBinding ContentLoader}"/>
                    </Grid>
                </ControlTemplate>
        			</Setter.Value>
        		</Setter>
				<Style.Triggers>
        			<Trigger Property="Layout" Value="List">
        				<Setter Property="Template">
        					<Setter.Value>
        						<ControlTemplate TargetType="{x:Type mui:ModernTab}">
        							<Grid>
        								<Grid.ColumnDefinitions>
        									<ColumnDefinition Width="100"/>
        									<ColumnDefinition Width="9"/>
        									<ColumnDefinition/>
        								</Grid.ColumnDefinitions>
        								<ListBox x:Name="LinkList" ItemsSource="{TemplateBinding Links}"
                                             ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" >
                                        <ListBox.ItemTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding DisplayName, Converter={StaticResource ToUpperConverter}}" Margin="10,2,2,2" FontSize="{DynamicResource SmallFontSize}" TextTrimming="CharacterEllipsis" />
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>
        								<Rectangle Grid.Column="1" Fill="{DynamicResource SeparatorBackground}" HorizontalAlignment="Center" VerticalAlignment="Stretch" Width="1"/>
                                        <mui:ModernFrame Grid.Column="2" ContentLoader="{TemplateBinding ContentLoader}" Margin="0,0,0,0" Source="{Binding SelectedSource, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClipToBounds="true"/>
        							</Grid>
        						</ControlTemplate>
        					</Setter.Value>
        				</Setter>
        			</Trigger>
        		</Style.Triggers>
        	</Style>
</ResourceDictionary>